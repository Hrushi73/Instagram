{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\Instagram2\\\\react-e-web\\\\src\\\\Components\\\\CroppedImageUPload\\\\CroppedImageUpload.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport ReactCrop from \"react-image-crop\";\nimport \"react-image-crop/dist/ReactCrop.css\";\nimport axios from \"axios\";\nimport \"./style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CroppedImageUpload = () => {\n  _s();\n\n  const [upImg, setUpImg] = useState(null);\n  const [userData, setUserData] = useState({});\n  const History = useHistory();\n  useEffect(() => {\n    try {\n      async function fetchData() {\n        const res = await axios.get(\"http://localhost:3001/Profile\");\n        setUserData(res.data);\n      }\n\n      fetchData();\n    } catch (err) {\n      History.push(\"/Login\");\n    }\n  }, []);\n  const imgRef = useRef(null);\n  const canvasRef = useRef(null);\n  const [crop, setCrop] = useState({\n    unit: \"px\",\n    width: 500,\n    aspect: 1 / 1\n  });\n  const croppedImage = useRef(null);\n\n  const onSelectFile = e => {\n    if (e.target.files && e.target.files.length > 0) {\n      const reader = new FileReader();\n      reader.addEventListener(\"load\", () => setUpImg(reader.result));\n      reader.readAsDataURL(e.target.files[0]);\n    }\n  };\n\n  const onLoad = img => {\n    imgRef.current = img;\n  };\n\n  const onCropComplete = crop => {\n    makeClientCrop(crop);\n  };\n\n  const makeClientCrop = async crop => {\n    if (imgRef.current && crop.width && crop.height) {\n      croppedImage.current = await getCroppedImg(imgRef.current, crop, \"newFile.jpeg\");\n    }\n  };\n\n  const getCroppedImg = (image, crop, fileName) => {\n    if (!canvasRef.current || !imgRef.current) {\n      return;\n    }\n\n    const canvas = canvasRef.current;\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    const ctx = canvas.getContext(\"2d\");\n    const pixelRatio = window.devicePixelRatio;\n    canvas.width = crop.width * pixelRatio;\n    canvas.height = crop.height * pixelRatio;\n    ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n    ctx.imageSmoothingQuality = \"high\";\n    ctx.drawImage(image, crop.x * scaleX, crop.y * scaleY, crop.width * scaleX, crop.height * scaleY, 0, 0, crop.width, crop.height);\n    return new Promise((resolve, reject) => {\n      // canvas.toDataURL(\"image/jpeg\");\n      canvas.toBlob(blob => {\n        if (!blob) {\n          //reject(new Error('Canvas is empty'));\n          console.error(\"Canvas is empty\");\n          return;\n        }\n\n        blob.name = fileName;\n        resolve(blob);\n      }, \"image/jpeg\");\n    });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    var file = new File([croppedImage.current], \"name\");\n    const formData = new FormData();\n    formData.append(\"file\", file); // formData.append(\"userData\", userData);\n\n    console.log(formData);\n    axios.post(\"http://localhost:3001/selectImage\", formData).then(res => {\n      // then print response status\n      if (res.status !== 500) {\n        // console.log(res.data);\n        // setshowImage(res.data);\n        History.push(\"/Home\");\n      } else {\n        console.log(res);\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"imagecropper\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          accept: \"image/*\",\n          id: \"profile-pic\",\n          onChange: onSelectFile,\n          name: \"image\",\n          type: \"file\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-image-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"crop-container\",\n          children: /*#__PURE__*/_jsxDEV(ReactCrop, {\n            src: upImg,\n            onImageLoaded: onLoad,\n            crop: crop,\n            onChange: c => setCrop(c),\n            onComplete: onCropComplete\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cropped-image-container\",\n          children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n            ref: canvasRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), upImg && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-button-container\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"upload-button\",\n          onClick: handleSubmit,\n          children: \"Upload\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CroppedImageUpload, \"+TSXaUvNv/deUmGn6KdqN9+YlLU=\", false, function () {\n  return [useHistory];\n});\n\n_c = CroppedImageUpload;\nexport default CroppedImageUpload;\n\nvar _c;\n\n$RefreshReg$(_c, \"CroppedImageUpload\");","map":{"version":3,"sources":["C:/Users/Admin/Desktop/Instagram2/react-e-web/src/Components/CroppedImageUPload/CroppedImageUpload.js"],"names":["React","useState","useRef","useEffect","useHistory","ReactCrop","axios","CroppedImageUpload","upImg","setUpImg","userData","setUserData","History","fetchData","res","get","data","err","push","imgRef","canvasRef","crop","setCrop","unit","width","aspect","croppedImage","onSelectFile","e","target","files","length","reader","FileReader","addEventListener","result","readAsDataURL","onLoad","img","current","onCropComplete","makeClientCrop","height","getCroppedImg","image","fileName","canvas","scaleX","naturalWidth","scaleY","naturalHeight","ctx","getContext","pixelRatio","window","devicePixelRatio","setTransform","imageSmoothingQuality","drawImage","x","y","Promise","resolve","reject","toBlob","blob","console","error","name","handleSubmit","preventDefault","file","File","formData","FormData","append","log","post","then","status","c"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport ReactCrop from \"react-image-crop\";\r\nimport \"react-image-crop/dist/ReactCrop.css\";\r\nimport axios from \"axios\";\r\nimport \"./style.css\";\r\n\r\nconst CroppedImageUpload = () => {\r\n  const [upImg, setUpImg] = useState(null);\r\n  const [userData, setUserData] = useState({});\r\n  const History = useHistory();\r\n\r\n  useEffect(() => {\r\n    try {\r\n      async function fetchData() {\r\n        const res = await axios.get(\"http://localhost:3001/Profile\");\r\n        setUserData(res.data);\r\n      }\r\n      fetchData();\r\n    } catch (err) {\r\n      History.push(\"/Login\");\r\n    }\r\n  }, []);\r\n\r\n  const imgRef = useRef(null);\r\n  const canvasRef = useRef(null);\r\n  const [crop, setCrop] = useState({ unit: \"px\", width: 500, aspect: 1 / 1 });\r\n  const croppedImage = useRef(null);\r\n\r\n  const onSelectFile = (e) => {\r\n    if (e.target.files && e.target.files.length > 0) {\r\n      const reader = new FileReader();\r\n      reader.addEventListener(\"load\", () => setUpImg(reader.result));\r\n      reader.readAsDataURL(e.target.files[0]);\r\n    }\r\n  };\r\n\r\n  const onLoad = (img) => {\r\n    imgRef.current = img;\r\n  };\r\n\r\n  const onCropComplete = (crop) => {\r\n    makeClientCrop(crop);\r\n  };\r\n\r\n  const makeClientCrop = async (crop) => {\r\n    if (imgRef.current && crop.width && crop.height) {\r\n      croppedImage.current = await getCroppedImg(\r\n        imgRef.current,\r\n        crop,\r\n        \"newFile.jpeg\"\r\n      );\r\n    }\r\n  };\r\n\r\n  const getCroppedImg = (image, crop, fileName) => {\r\n    if (!canvasRef.current || !imgRef.current) {\r\n      return;\r\n    }\r\n    const canvas = canvasRef.current;\r\n    const scaleX = image.naturalWidth / image.width;\r\n    const scaleY = image.naturalHeight / image.height;\r\n    const ctx = canvas.getContext(\"2d\");\r\n    const pixelRatio = window.devicePixelRatio;\r\n    canvas.width = crop.width * pixelRatio;\r\n    canvas.height = crop.height * pixelRatio;\r\n\r\n    ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\r\n    ctx.imageSmoothingQuality = \"high\";\r\n    ctx.drawImage(\r\n      image,\r\n      crop.x * scaleX,\r\n      crop.y * scaleY,\r\n      crop.width * scaleX,\r\n      crop.height * scaleY,\r\n      0,\r\n      0,\r\n      crop.width,\r\n      crop.height\r\n    );\r\n\r\n    return new Promise((resolve, reject) => {\r\n      // canvas.toDataURL(\"image/jpeg\");\r\n      canvas.toBlob((blob) => {\r\n        if (!blob) {\r\n          //reject(new Error('Canvas is empty'));\r\n          console.error(\"Canvas is empty\");\r\n          return;\r\n        }\r\n        blob.name = fileName;\r\n        resolve(blob);\r\n      }, \"image/jpeg\");\r\n    });\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    var file = new File([croppedImage.current], \"name\");\r\n    const formData = new FormData();\r\n    formData.append(\"file\", file);\r\n    // formData.append(\"userData\", userData);\r\n    console.log(formData);\r\n    axios.post(\"http://localhost:3001/selectImage\", formData).then((res) => {\r\n      // then print response status\r\n      if (res.status !== 500) {\r\n        // console.log(res.data);\r\n        // setshowImage(res.data);\r\n        History.push(\"/Home\");\r\n      } else {\r\n        console.log(res);\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"imagecropper\">\r\n      <form>\r\n        <div className=\"input-container\">\r\n          <input\r\n            accept=\"image/*\"\r\n            id=\"profile-pic\"\r\n            onChange={onSelectFile}\r\n            name=\"image\"\r\n            type=\"file\"\r\n          />\r\n        </div>\r\n        <div className=\"main-image-container\">\r\n          <div className=\"crop-container\">\r\n            <ReactCrop\r\n              src={upImg}\r\n              onImageLoaded={onLoad}\r\n              crop={crop}\r\n              onChange={(c) => setCrop(c)}\r\n              onComplete={onCropComplete}\r\n            />\r\n          </div>\r\n          <div className=\"cropped-image-container\">\r\n            <canvas ref={canvasRef} />\r\n          </div>\r\n        </div>\r\n        {upImg && (\r\n          <div className=\"upload-button-container\">\r\n            <button className=\"upload-button\" onClick={handleSubmit}>\r\n              Upload\r\n            </button>\r\n          </div>\r\n        )}\r\n      </form>\r\n\r\n      {/* heres how to get image back\r\n         <div>\r\n        <h1>{showImage}</h1>\r\n        <img\r\n          src={`http://localhost:3001/inProcessImages/${showImage}`}\r\n          alt=\"getting back\"\r\n        />\r\n      </div> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CroppedImageUpload;\r\n"]},"metadata":{},"sourceType":"module"}